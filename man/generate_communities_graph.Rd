% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_communities_graph.R
\name{generate_communities_graph}
\alias{generate_communities_graph}
\title{Generate Communities Graph}
\usage{
generate_communities_graph(
  year = NULL,
  tournament_weapon = NULL,
  weight_threshold = 0,
  population_threshold = 0,
  hema_clubs = HEMAscRaper::hema_clubs,
  hema_events = HEMAscRaper::hema_events,
  hema_match_results = HEMAscRaper::hema_match_results
)
}
\arguments{
\item{year}{A numeric value, vector of numeric values, or NULL. Filters the data to include only matches from the specified year(s). Default: NULL (all years).}

\item{tournament_weapon}{A character vector or NULL. Filters the data to include only matches involving the specified tournament weapon(s). Default: NULL (all weapons).}

\item{weight_threshold}{An integer. Minimum weight for edges (connections between nodes) to be included in the graph. Default: 5.}

\item{population_threshold}{An integer. Minimum population size for nodes (clubs) to be included in the graph. Default: 10.}

\item{hema_clubs}{A dataset containing HEMA clubs. Default: `HEMAscRaper::hema_clubs`.}

\item{hema_events}{A dataset containing HEMA events. Default: `HEMAscRaper::hema_events`.}

\item{hema_match_results}{A dataset containing HEMA match results. Default: `HEMAscRaper::hema_match_results`.}
}
\value{
A `tbl_graph` object with nodes and edges representing the filtered data, including detected communities and their attributes.
}
\description{
Generates a network graph from HEMA-related datasets, representing clubs, events, and matches. 
Filters the data to include only edges with sufficient weight and nodes with a minimum population. 
Applies community detection using the Louvain algorithm to group nodes into communities based on their connections.

## Result Presentation
After generating the graph, you can inspect the filtered edges and nodes, as well as explore the detected communities:

```r
# View filtered edges
filtered_graph %>% tidygraph::activate(edges) %>% tibble::as_tibble()

# Extract communities and their details
communities <- filtered_graph %>%
  tidygraph::activate(nodes) %>%
  tibble::as_tibble() %>%
  dplyr::select(Id, Label, Population, Community, Community_Label)
```
}
\examples{
# Example 1: Generate a graph for 2024 with default thresholds and "Steel Longsword" weapon
graph <- generate_communities_graph(
  year = 2024,
  tournament_weapon = "Steel Longsword"
)

# Example 2: Generate a graph for multiple years with custom thresholds
graph <- generate_communities_graph(
  year = c(2023, 2024),
  tournament_weapon = "Steel Longsword",
  weight_threshold = 10,
  population_threshold = 20
)

# Example 3: View nodes and communities
library(dplyr)
nodes_with_communities <- graph \%>\%
  tidygraph::activate(nodes) \%>\%
  as_tibble() \%>\%
  select(Id, Label, Population, Community, Community_Label)

# Example 4: View filtered edges
library(dplyr)
library(tidygraph)
filtered_edges <- graph \%>\%
  activate(edges) \%>\%
  as_tibble()

}
